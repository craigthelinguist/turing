; this program performs x^x
q0 1 1 * r0
q0 _ _ * halt

; take the product of x with x^x
; append zero to the end of x^x so we know what we're multiplying
p0 1 1 r p0
p0 _ _ r p1
p1 1 1 r p1
p1 _ 0 * p2
p2 0 0 l p3
p3 1 1 l p3
p3 _ _ l p4
p4 1 1 l p10

; zero current iteration along x, move to the start of x^x
; if current digit is _, we have finished all x iterations and proceed to clean up p30
p10 1 0 * p11
p10 _ _ r p50
p11 0 0 r p12
p12 1 1 r p12
p12 _ _ r p30

; zero current digit and keep track of the original value of x^x
; add 1s to the end of x^x
; move back to start of x^x and move the current zero along, then move up one and repeat
; base case is when we're looking at the zero appended during p0 initialisation
; go to p40 in that case
p30 1 0 * p31
p30 0 0 l p40
p31 0 0 r p31
p31 1 1 r p31
p31 _ 1 * p33
p33 1 1 l p33
p33 0 0 l p33
p33 _ _ r p34
p34 1 1 r p34
p34 0 1 * p35
p35 1 1 r p30

; go back to iterator. check for next iteration of x.
p40 1 1 l p40
p40 _ _ l p40
p40 0 1 * p41
p41 1 1 l p10

; move to product, delete the zero, move back to x, stop on start of x and give control flow back
p50 1 1 r p50
p50 _ _ r p51
p51 1 1 r p51
p51 0 1 * p52
p52 1 1 r p52
p52 _ _ l p53
p53 1 _ * p54
p54 1 1 l p54
p54 _ _ l p55
p55 1 1 l p55
p55 _ _ l p56
p56 1 1 l p56
p56 _ _ r m20

; copy x twice.
; leftmost x will be used as an iterator.
; middle x will be a reference to the original x.
; rightmost x will be the x^x that we are constructing.
r0 _ _ * halt
r0 1 1 * r1
r1 1 1 r r1
r1 _ _ l r100
r100 1 0 * r101
r100 _ _ r r300
r101 0 0 r r101
r101 1 1 r r101
r101 _ _ r r102
r102 1 1 r r102
r102 _ 1 * r200
r200 1 1 l r200
r200 _ _ l r201
r201 1 1 l r201
r201 0 1 * r202
r202 1 1 l r100
r300 1 1 r r300
r300 _ _ r s0

s0 _ _ * halt
s0 1 1 * s1
s1 1 1 r s1
s1 _ _ l s100
s100 1 0 * s101
s100 _ _ r s300
s101 0 0 r s101
s101 1 1 r s101
s101 _ _ r s102
s102 1 1 r s102
s102 _ 1 * s200
s200 1 1 l s200
s200 _ _ l s201
s201 1 1 l s201
s201 0 1 * s202
s202 1 1 l s100
s300 1 1 * m0

; set up, reduce iteration string by 1
m0 1 1 l m1
m1 _ _ l m2
m2 1 1 l m2
m2 _ _ r m3
m3 1 _ * m4
m4 _ _ r m5
m5 1 1 r m5
m5 _ _ r m20

; check for iterations
m20 1 1 l m21
m21 _ _ l m22
m22 _ _ r m50
m22 1 1 * m23
m23 1 1 l m23
m23 _ _ r m24
m24 1 _ * m25
m25 _ _ r m26
m26 1 1 r m26
m26 _ _ r p0

; clean up, delete x, halt on x^x
m50 _ _ r m51
m51 1 _ * m52
m52 _ _ r m51
m51 _ _ r halt

